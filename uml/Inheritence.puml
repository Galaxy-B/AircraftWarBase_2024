@startuml Inheritence
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedX():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}

abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    # shootNum:int
    # power:int
    # direction:int
    # shootStrategy:ShootStrategy
    
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp, int shootNum, int power, int direction, ShootStrategy shootStrategy)
    + decreaseHp(int decrease):void
    + getHp():int
    + getDirection():int
    + getShootNum():int
    + getPower():int
    + setShootNum(int num):void
    + setShootStrategy(ShootStrategy shootStrategy):void
    + executeShootStrategy():List<BaseBullet>
    + {abstract} dropProp(List<PropFactory> propFactory):List<AbstractProp>
    + {abstract} getScore():int
    + {abstract} update():void
}

class HeroAircraft
{
    - {static} instance:HeroAircraft

    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + {static} getInstance(int locationX, int locationY, int speedX, int speedY, int hp):HeroAircraft
    + forward():void
    + shoot():List<BaseBullet>
    + dropProp(List<PropFactory> propFactory):List<AbstractProp>
    + getScore():int
    + update():void
}

class MobEnemy 
{
    - score:int
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int power)
    + forward():void
    + dropProp(List<PropFactory> propFactory):List<AbstractProp>
    + getScore():int
    + update():void
}

class EliteEnemy
{
    - score:int
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int power)
    + forward():void
    + dropProp(List<PropFactory> propFactory):List<AbstractProp>
    + getScore():int
    + update():void    
}

class ElitePlusEnemy
{
    - score:int
    + ElitePlusEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int power)
    + forward():void
    + dropProp(List<PropFactory> propFactory):List<AbstractProp>
    + getScore():int
    + update():void    
}

class BossEnemy
{
    - score:int
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int power)
    + forward():void
    + dropProp(List<PropFactory> propFactory):List<AbstractProp>
    + getScore():int
    + update():void    
}

AbstractAircraft <|-up- HeroAircraft
AbstractAircraft <|-down- MobEnemy
AbstractAircraft <|-down- EliteEnemy
AbstractAircraft <|-down- ElitePlusEnemy
AbstractAircraft <|-up- BossEnemy

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

class HeroBullet 
{
    + HeroBullet(int locationX, int locationY, int speedX, int speedY, int power)
}

class EnemyBullet 
{
    + EnemyBullet(int locationX, int locationY, int speedX, int speedY, int power)
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

abstract class AbstractProp
{
    + AbstractProp(int locationX, int locationY, int speedX, int speedY)
    + {abstract} takeEffect(AbstractAircraft aircraft):void
}

class HealProp
{
    + HealProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + takeEffect(AbstractAircraft aircraft):void
}

class FireProp
{
    + FireProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + takeEffect(AbstractAircraft aircraft):void
}

class FirePlusProp
{
    + FirePlusProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + takeEffect(AbstractAircraft aircraft):void
}

class BombProp
{
    - aircraftList:List<AbstractAircraft>

    + BombProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + addAircraft(List<AbstractAircraft> aircrafts):void
    + notifyAllAircraft():void
    + takeEffect(AbstractAircraft aircraft):void
}

AbstractProp <|-down- HealProp
AbstractProp <|-down- BombProp
AbstractProp <|-up- FireProp
AbstractProp <|-up- FirePlusProp

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- AbstractProp

@enduml